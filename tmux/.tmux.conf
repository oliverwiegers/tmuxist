# : <<EOF

#   ________  _____  ___  __    ____  ___   _____ ______
#  /_  __/  |/  / / / / |/ /   / __ )/   | / ___// ____/
#   / / / /|_/ / / / /|   /   / __  / /| | \__ \/ __/
#  / / / /  / / /_/ //   |   / /_/ / ___ |___/ / /___
# /_/ /_/  /_/\____//_/|_|  /_____/_/  |_/____/_____/
#    __________  _   __________________
#   / ____/ __ \/ | / /  _/ ____/ ____/
#  / /   / / / /  |/ // // /_  / / __
# / /___/ /_/ / /|  // // __/ / /_/ /
# \____/\____/_/ |_/___/_/    \____/

# DO NOT EDIT THIS FILE.
# Use ~/.tmux.conf.local and ~/.tmux.conf.remote to change tmux behavior.

#    _____      __  __  _
#   / ___/___  / /_/ /_(_)___  ____ ______
#   \__ \/ _ \/ __/ __/ / __ \/ __ `/ ___/
#  ___/ /  __/ /_/ /_/ / / / / /_/ (__  )
# /____/\___/\__/\__/_/_/ /_/\__, /____/
#                           /____/

# General. =====================================================================

# Increase scrollback buffer.
set-option -g history-limit 50000

# Visuals. =====================================================================

# Set tmux to use colors.
set-option -g default-terminal "screen-256color" # colors!

# Start counting windows at 1.
set-option -g base-index 1

# Renumber windows when window is closed.
set-option -g renumber-windows on

# Rename window to reflect current program.
set-option -w -g automatic-rename off

# Expect UTF-8 (tmux < 2.2).
set-option -q -g status-utf8 on
set-option -w -q -g utf8 on

# Stop tmux from starting login shells.
set -g default-command "${SHELL}"

# Status bar. ------------------------------------------------------------------

# Check if device has a battery.
run-shell 'tmux set-environment -g has_battery \
    $(if [ -L "/sys/class/power_supply/BAT0" ]; \
    then echo 1; else echo 0; fi)'

# Check if device has pulseaudio.
run-shell 'tmux set-environment -g has_audio \
    $(if command -v pamixer > /dev/null 2>&1; \
    then echo 1; else echo 0; fi)'

# Check if device has network.
run-shell 'tmux set-environment -g has_network \
    $(if [ "$(ip route show default | wc -l)" -gt 0 ]; \
    then echo 1; else echo 0; fi)'

# Bar length.
set -g status-left-length 60
set -g status-right-length 150

# Disable visual and bell notifications.
set-option -g monitor-activity off
set-option -g visual-activity off

# Redraw status bar.
set-option -g status-interval 10

# Status bar default colors.
set-option -g status-style fg=colour7,bg=colour0

# Status bar window list colors.
set-option -g window-status-style fg=black,bg=white

# Status bar delimiters.
#  U+e0b0
#  U+e0b1
#  U+e0b2
#  U+e0b3

# Status bar left.
# Shows wether pane is zoomed and wether prefix is pressed.
set-option -g status-left "\
#[fg=colour0, bg=colour7]#{?client_prefix,#[bg=colour1],} ❐ #S \
#[fg=colour7, bg=colour0]#{?client_prefix,#[fg=colour1],}\
#[fg=colour3]#{?window_zoomed_flag,   ,}"

# Current window format.
set-window-option -g window-status-format "\
#[fg=colour0, bg=colour8,noitalics]\
#[fg=colour0, bg=colour8] #I \
#[fg=colour0, bg=colour8] #W \
#[fg=colour8, bg=colour0]"

# Window list format.
set-window-option -g window-status-current-format "\
#[fg=colour0, bg=colour2]\
#[fg=colour0, bg=colour2] #I \
#[fg=colour0, bg=colour2] #W \
#[fg=colour2, bg=colour0]"

# Status bar right.
# Shows wether prefix is used for local session or will be handled by nested
# remote session.
# Also shows wether panes are in sync or not.
set-option -g status-right "\
#[fg=colour7,bold, bg=colour0]#{?pane_synchronized,  ,}\
#[fg=colour3, bg=colour0]#{?pane_synchronized,SYNCED,}\
#[fg=colour7, bg=colour0]#{?tmux_keytable,  ,}\
#[fg=colour3, bg=colour0]#{?tmux_keytable,REMOTE,}\
#[fg=colour7] #{?has_network, ,}\
#[fg=colour7] #(cut -c3- $(tmux display-message -p #{config_files} | cut -d ',' -f 1) | sh -s _network_stats 2> /dev/null)\
#[fg=colour7] #{?has_audio, ,}\
#[fg=colour7] #(cut -c3- $(tmux display-message -p #{config_files} | cut -d ',' -f 1) | sh -s _audio_stats 2> /dev/null)\
#[fg=colour7] #{?has_battery, ,}\
#[fg=colour7] #(cut -c3- $(tmux display-message -p #{config_files} | cut -d ',' -f 1) | sh -s _battery_stats 2> /dev/null)\
#[fg=colour7]   %d.%m.%Y\
#[fg=colour7]  %H:%M\
#[fg=#{?tmux_user_root,colour1,colour7},nobold, bg=colour0] \
#[fg=colour0, bg=#{?tmux_user_root,colour1,colour7}] #(cut -c3- $(tmux display-message -p #{config_files} | cut -d ',' -f 1) | sh -s _username 2> /dev/null)\
#[fg=colour8, bg=#{?tmux_user_root,colour1,colour7}] \
#[fg=colour0, bg=colour8] #(cut -c3- $(tmux display-message -p #{config_files} | cut -d ',' -f 1) | sh -s _hostname 2> /dev/null) "

# Navigation. ==================================================================

# Set vi mode.
set-option -g mode-keys vi

# Enable emacs bindings in command mode.
set-option -g status-keys emacs

# Commands. ====================================================================

# Edit configuration.
bind-key e new-window -n "~/.tmux.conf.local" "EDITOR=\${EDITOR:-vim} ~/.tmux.conf.local && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf reloaded.\""

# Reload configuration.
bind-key r run "tmux source-file $(echo #{config_files} | cut -d ',' -f 1) && tmux display 'Tmux config reloaded.'"

#     ____  _           ___
#    / __ )(_)___  ____/ (_)___  ____ ______
#   / __  / / __ \/ __  / / __ \/ _ ``/ ___/
#  / /_/ / / / / / /_/ / / / / / /_/ (__  )
# /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/
#                             /____/

# Useful Default Keybindings. ==================================================

# bind-key n next-window
# bind-key p previous-window
# bind-key w choose-tree -w
# bind-key s choose-tree -s
# bind-key o rotate-window
# bind-key f find-window

# Custom Keybindings. ==========================================================

# Panes. -----------------------------------------------------------------------

# Pane movement.
bind-key h select-pane -L\; refresh-client -S
bind-key j select-pane -D\; refresh-client -S
bind-key k select-pane -U\; refresh-client -S
bind-key l select-pane -R\; refresh-client -S

# Pane resizing.
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Split window into panes.
unbind-key '"'
bind-key v split-window -h -c '#{pane_current_path}'\; refresh-client -S
unbind-key '%'
bind-key - split-window -v -c '#{pane_current_path}'\; refresh-client -S

# Kill current pane.
bind-key x kill-pane\; refresh-client -S

# Syncronize panes.
bind S set-window-option synchronize-panes

# Windows. ---------------------------------------------------------------------

# Create new window next to curret window.
bind-key c new-window -a\; refresh-client -S

# Switch to last used window.
bind-key Tab last-window

# Window movement.
bind-key 1 select-window -t:1\; refresh-client -S
bind-key 2 select-window -t:2\; refresh-client -S
bind-key 3 select-window -t:3\; refresh-client -S
bind-key 4 select-window -t:4\; refresh-client -S
bind-key 5 select-window -t:5\; refresh-client -S
bind-key 6 select-window -t:6\; refresh-client -S
bind-key 7 select-window -t:7\; refresh-client -S
bind-key 8 select-window -t:8\; refresh-client -S
bind-key 9 select-window -t:9\; refresh-client -S

# Keymaps. ---------------------------------------------------------------------

# Toogle keymap to work in nested remote tmux session.
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    run-shell 'tmux set-environment -g tmux_keytable \
        $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
        then echo 1; else echo 0; fi)' \;\
    refresh-client -S \;\

# Copy Mode. -------------------------------------------------------------------

# Enter/leave vim copy mode.
bind-key Enter copy-mode
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi q send -X cancel

# Vim selection mode.
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel

# Vim copy mode page up/down while not leaving home row
bind-key -T copy-mode-vi K send-keys -X page-up
bind-key -T copy-mode-vi J send-keys -X page-down

# Copy to Wayland clipboard.
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | wl-copy'
# Copy to X11 clipboard.
if -b '[command -v xsel > /dev/null 2>&1] && ! [command -v wl-copy > /dev/null 2>&1]' 'bind-key y run -b "tmux save-buffer - | xsel -i -b"'
# Copy from MacOS clipboard.
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind-key y run -b "tmux save-buffer - | pbcopy'

# Paste from Wayland clipboard.
if -b 'command -v wl-paste > /dev/null 2>&1' 'bind-key p run -b "tmux set-buffer \"$(wl-paste -n)\" && tmux paste-buffer"'
# Paste from Wayland clipboard.
if -b '[command -v xclip > /dev/null 2>&1] && ! [command -v wl-paste > /dev/null 2>&1]' 'bind-key p run -b "tmux set-buffer \"$(xclip -o)\" &&  tmux paste-buffer"'
# Paste from MacOS clipboard.
if -b 'command -v pbpaste > /dev/null 2>&1' 'bind-key p run -b "tmux set-buffer \"$(pbpaste)\" && tmux paste-buffer"'

# -- buffers -------------------------------------------------------------------

bind-key b list-buffers  # list paste buffers
bind-key P choose-buffer # choose which buffer to paste from

# Nice stuff. ------------------------------------------------------------------

# Urlview.
bind U run "cut -c3- $(echo #{config_files} | cut -d ',' -f 1) | sh -s _urlscan #{pane_id} 2> /dev/null"

# Load user overrides.
source-file -q ~/.tmux.conf.local

#     ____                       __
#    / __ \___  ____ ___  ____  / /____
#   / /_/ / _ \/ __ `__ \/ __ \/ __/ _ \
#  / _, _/  __/ / / / / / /_/ / /_/  __/
# /_/ |_|\___/_/ /_/ /_/\____/\__/\___/
#   ____ __      ______ _________  ____  ___  __________
#  / __ `/ | /| / / __ `/ ___/ _ \/ __ \/ _ \/ ___/ ___/
# / /_/ /| |/ |/ / /_/ / /  /  __/ / / /  __(__  |__  )
# \__,_/ |__/|__/\__,_/_/   \___/_/ /_/\___/____/____/

# Set indicator for keymap.
run-shell 'tmux set-environment -g tmux_keytable \
    $(if [ "$(tmux show-option -qv key-table)" = "off" ]; \
    then echo 1; else echo 0; fi)'

# Load settings for remote session.
if-shell 'test -n "$SSH_CLIENT"' 'source-file -q ~/.tmux.conf.remote'

#     ____  __            _
#    / __ \/ /_  ______ _(_)___  _____
#   / /_/ / / / / / __ `/ / __ \/ ___/`
#  / ____/ / /_/ / /_/ / / / / (__  )
# /_/   /_/\__,_/\__, /_/_/ /_/____/
#               /____/

# Load Plugins.  ===============================================================

run-shell ~/.tmuxist/plugins/tmux-resurrect/resurrect.tmux
run-shell ~/.tmuxist/plugins/tmux-continuum/continuum.tmux
# NIX PLUGIN CONFIG PLACEHOLDER

# Plugins Settings.  ===========================================================

# Ressurect.
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes 'ssh newsboat bluetoothctl neomutt vim neovim nix'
set -g @resurrect-hook-post-save-all 'remove_old_tmux_sessions.sh'

# Continuum.
set -g @continuum-restore 'on'

#     ______                 __  _
#    / ____/_  ______  _____/ /_(_)___  ____  _____
#   / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
#  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
# /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# #
# # Template function for new function containing override mechanism.
# #
# #_template_function() {
# #    if ! type _template_function_override > /dev/null 2>&1; then
# #        # Insert all function code here.
# #        echo 'Awesome template function.'
# #    else
# #        _template_function_override
# #    fi
# #}
#
# eval "$(cut -c3- ~/.tmux.conf.local)"
# _read_function_overrides() {
#     eval "$(cut -c3- ~/.tmux.conf.local)"
# }
#
# _is_ssh() {
#     cmdline="${1}"
#     if ! type _is_ssh_override > /dev/null 2>&1; then
#         if [ -z "${cmdline##*ssh *}" ]; then
#             return 0
#         else
#             return 1
#         fi
#     else
#         _is_ssh_override
#     fi
# }
#
# _ssh_stats() {
#     cmdline="${1}"
#     if ! type _ssh_stats_override > /dev/null 2>&1; then
#         ssh_args="${cmdline#ssh }"
#         user_host="$(\
#             # shellcheck disable=SC2086
#             ssh -G ${ssh_args} |\
#             awk '(/^user /) {
#                 user=$2
#             }
#             (/^hostname /) {
#                 hostname=$2
#             } END {
#                 print user":"hostname
#                 exit
#             }
#         ')"
#         printf '%s' "${user_host}"
#     else
#         _ssh_stats_override
#     fi
# }
#
# _tty_stats() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _tty_stats_override > /dev/null 2>&1; then
#         ps -t "${tty}" -o user=WIDEOUTPUTFORLONGNAME -o pid= -o ppid= -o command= | awk '
#             NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#                 users[$2] = $1; parents[$2] = $3; children[$3] = $2; pid=$2; $1 = $2 = $3 = ""; commands[pid] = substr($0,4)
#             } END {
#                 for (ppid in parents) {
#                     pid = ppid
#                     while (parents[pid])
#                     pid = parents[pid]
#
#                     if (!(ppid in children) && pid != 1) {
#                         print ppid":"users[ppid]":"commands[ppid]
#                         exit
#                     }
#                 }
#             }
#         '
#     else
#         _tty_stats_override
#     fi
# }
#
# _username() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _username_override > /dev/null 2>&1; then
#         tty_stats="$(_tty_stats "${tty}")"
#         username="${tty_stats#*:}"
#         cmdline="${username#*:}"
#         username="${username%%:*}"
#         if _is_ssh "${cmdline}";then
#             ssh_stats="$(_ssh_stats "${cmdline}")"
#             printf '%s' "${ssh_stats%%:*}"
#         else
#             if [ "${username}" = "caffeinate" ];then
#                 username="$(hostname)"
#             fi
#             printf '%s' "${username}"
#         fi
#         if [ "${username}" = "root" ]; then
#             tmux set-environment -g tmux_user_root 'root'
#         else
#             tmux set-environment -g tmux_user_root ''
#         fi
#     else
#         _username_override "${tty}"
#     fi
# }
#
# _hostname() {
#     tty=${1:-$(tmux display -p '#{pane_tty}')}
#     if ! type _hostname_override > /dev/null 2>&1; then
#         tty_stats="$(_tty_stats "${tty}")"
#         cmdline="${tty_stats#*:}"
#         cmdline="${cmdline#*:}"
#         if _is_ssh "${cmdline}";then
#             ssh_stats="$(_ssh_stats "${cmdline}")"
#             printf '%s' "${ssh_stats##*:}"
#         else
#             printf '%s' "$(uname -n)"
#         fi
#     else
#         _hostname_override "${tty}"
#     fi
# }
#
# _urlscan() {
#     pane_id="$1"
#     if ! type _urlscan_override > /dev/null 2>&1; then
#         tmux capture-pane -J -S 0 -E - -b "urlscan-${pane_id}" -t "${pane_id}"
#         tmux split-window -h -l '40%' \
#             "tmux show-buffer -b urlscan-${pane_id} | urlscan -d -s -c ; tmux delete-buffer -b urlscan-${pane_id}"
#     else
#         _urlscan_override
#     fi
# }
#
# _battery_stats() {
#     if ! type _battery_stats_override > /dev/null 2>&1; then
#         if ! [ -d "$HOME/.cache" ]; then
#             mkdir -p "$HOME/.cache"
#         fi
#         _cleanup_tmp() {
#             for percent in "$@"; do
#                 tmp_file_path="$HOME/.cache/tmux_battery_alert_${percent}"
#                 if [ -f "${tmp_file_path}" ]; then
#                     rm "${tmp_file_path}"
#                 fi
#             done
#         }
#         batteries="$(\
#             find /sys/class/power_supply/ -name 'BAT*' \
#             | rev \
#             | cut -d '/' -f 1 \
#             | rev \
#             )"
#         output=''
#         output_icon=''
#         for battery in ${batteries}; do
#             battery_path="/sys/class/power_supply/${battery}"
#             status="$(cat "${battery_path}/status")"
#             capacity="$(cat "${battery_path}/capacity")"
#             if ! [ "${status}" = 'Discharging' ]; then
#                 output_icon=''
#                 _cleanup_tmp '5' '15'
#             else
#                 if [ "${capacity}" -lt 5 ]; then
#                     output_icon=''
#                     if ! [ -f "$HOME/.cache/tmux_battery_alert_5" ]; then
#                         if command -v notify-send > /dev/null 2>&1; then
#                             ffplay -f lavfi -i \
#                                 "sine=frequency=100:duration=0.1" \
#                                 -autoexit -nodisp > /dev/null 2>&1
#                             notify-send "Alert!" "Battery is below 5%."
#                             touch "$HOME/.cache/tmux_battery_alert_5"
#                         fi
#                     fi
#                 elif [ "${capacity}" -lt 15 ]; then
#                     output_icon=''
#                     if ! [ -f "$HOME/.cache/tmux_battery_alert_15" ]; then
#                         if command -v notify-send > /dev/null 2>&1; then
#                             ffplay -f lavfi -i \
#                                 "sine=frequency=100:duration=0.1" \
#                                 -autoexit -nodisp > /dev/null 2>&1
#                             notify-send "Alert!" "Battery is below 15%."
#                             touch "$HOME/.cache/tmux_battery_alert_15"
#                         fi
#                     fi
#                 elif [ "${capacity}" -lt 50 ]; then
#                     output_icon=''
#                 elif [ "${capacity}" -lt 80 ]; then
#                     output_icon=''
#                 elif [ "${capacity}" -le 100 ]; then
#                     output_icon=''
#                 fi
#             fi
#             output="${output} ${capacity} ${output_icon} "
#         done
#         # Use xargs to strip whitespace.
#         printf '%s' "$(echo "${output}" | xargs)"
#     else
#         _battery_stats_override
#     fi
# }
#
# _audio_stats() {
#     if ! type _audio_stats_override > /dev/null 2>&1; then
#         if [ "$(uname -o)" = "Darwin" ];then
#             # Display delimiter when audio is present.
#             tmux set-environment -g has_audio 1
#
#             _macos_audio_stats
#         elif [ -d "/sys/class/sound" ]; then
#             if command -v pactl > /dev/null 2>&1; then
#                 # Display delimiter when audio is present.
#                 tmux set-environment -g has_audio 1
#
#                 _pulseaudio_stats
#             elif command -v wpctl > /dev/null 2>&1; then
#                 # Display delimiter when audio is present.
#                 tmux set-environment -g has_audio 1
#
#                 _pipewire_audio_stats
#             else
#                 # Remove delimiter when no audio is present.
#                 tmux set-environment -g has_audio 0
#             fi
#         fi
#     else
#         _audio_stats_override
#     fi
# }
#
# _macos_audio_stats() {
#     if ! type _macos_audio_stats_override > /dev/null 2>&1; then
#         output=''
#         sink_id="$(pactl list short sinks \
#             | grep "$(pactl get-default-sink)" \
#             | awk '{print $1}')"
#         muted="$(osascript -e 'get volume settings' \
#             | grep -oE 'output muted:[a-z]*' \
#             | cut -d ':' -f 2)"
#         volume="$(osascript -e 'get volume settings' \
#             | grep -oE 'output volume:[0-9]*' \
#             | cut -d ':' -f 2)"
#         if [ "${muted}" = 'true' ]; then
#             output=""
#         else
#             if [ "${volume}" -lt 5 ]; then
#                 output_icon=''
#             elif [ "${volume}" -lt 50 ]; then
#                 output_icon=''
#             else
#                 output_icon=''
#             fi
#             output="${volume} ${output_icon}"
#         fi
#         printf '%s' "${output}"
#     else
#         _macos_audio_stats_override
#     fi
# }
#
# _pipewire_audio_stats() {
#     if ! type _pipewire_audio_stats_override > /dev/null 2>&1; then
#         output=''
#         muted="$(wpctl get-volume @DEFAULT_AUDIO_SINK@ \
#             | awk '/MUTED/ {print $3}')"
#         volume="$(wpctl get-volume @DEFAULT_AUDIO_SINK@ \
#             | awk '{print $2*100}')"
#         if [ "${muted}" = '[MUTED]' ]; then
#             output_icon=''
#             output="${output_icon}"
#         else
#             if [ "${volume}" -lt 5 ]; then
#                 output_icon=''
#             elif [ "${volume}" -lt 50 ]; then
#                 output_icon=''
#             else
#                 output_icon=''
#             fi
#             output="${volume} ${output_icon}"
#         fi
#         printf '%s' "${output}"
#     else
#         _pipewire_audio_stats_override
#     fi
# }
#
# _pulseaudio_stats() {
#     if ! type _pulseaudio_stats_override > /dev/null 2>&1; then
#         output=''
#         sink_id="$(pactl list short sinks \
#             | grep "$(pactl get-default-sink)" \
#             | awk '{print $1}')"
#         muted="$(pactl list sinks \
#             | SINK="${sink_id}" perl -000ne 'if(/#$ENV{SINK}/){/(Mute:.*)/; print "$1\n"}' \
#             | awk '{print $2}')"
#         volume="$(pactl list sinks \
#             | SINK="${sink_id}" perl -000ne 'if(/#$ENV{SINK}/){/(Volume:.*)/; print "$1\n"}' \
#             | grep -oE '[0-9]{,3}%' \
#             | uniq)"
#         if [ "${muted}" = 'yes' ]; then
#             output_icon=''
#             output="${output_icon}"
#         else
#             if [ "${volume}" -lt 5 ]; then
#                 output_icon=''
#             elif [ "${volume}" -lt 50 ]; then
#                 output_icon=''
#             else
#                 output_icon=''
#             fi
#             output="${volume} ${output_icon}"
#         fi
#         printf '%s' "${output}"
#     else
#         _pulseaudio_stats_override
#     fi
# }
#
# _network_stats() {
#     if ! type _network_stats_override > /dev/null 2>&1; then
#         output='No network!'
#         wifi_icon=''
#         ethernet_icon=''
#         if [ "$(uname -o)" = 'Darwin' ]; then
#             # Use 0.0.0.0 instead of localhost. localhost goes over the
#             # loopback interface.
#             default_iface="$(route -n get 0.0.0.0 \
#                 | awk '/interface/ {print $2'})"
#             ip="$(ifconfig "${default_iface}" \
#                 | awk --posix \
#                 '/inet [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/ {print $2}')"
#             if [ "$(networksetup -getinfo Wi-Fi | awk '/^IP address/ {print $3}')" = "${ip}" ]; then
#                 output="${ip} ${wifi_icon}"
#             else
#                 output="${ip} ${ethernet_icon}"
#             fi
#         elif [ "$(ip route show default | wc -l)" -gt 0 ]; then
#             default_iface=$(awk '$2 == 00000000 { print $1 }' /proc/net/route \
#                 | sed 1q)
#             ip="$(ip addr show dev "${default_iface}" \
#                 | awk '$1 ~ /^inet/ { sub("/.*", "", $2); print $2 }' \
#                 | sed 1q)"
#             if grep -q "${default_iface}" /proc/net/wireless; then
#                 output="${ip} ${wifi_icon}"
#             else
#                 output="${ip} ${ethernet_icon}"
#             fi
#         fi
#         # Use xargs to strip whitespace.
#         printf '%s' "$(echo "${output}" | xargs)"
#     else
#         _network_stats_override
#     fi
# }
#
# "$@"
